//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ANFramework_ManagersWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ANFramework.Managers), typeof(ANFramework.BaseBehaviour));
		L.RegFunction("Init", Init);
		L.RegFunction("Start", Start);
		L.RegFunction("Update", Update);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("New", _CreateANFramework_Managers);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Resource", get_Resource, null);
		L.RegVar("Lua", get_Lua, null);
		L.RegVar("Coroutine", get_Coroutine, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateANFramework_Managers(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ANFramework.Managers obj = new ANFramework.Managers();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ANFramework.Managers.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)ToLua.CheckObject<ANFramework.Managers>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)ToLua.CheckObject<ANFramework.Managers>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)ToLua.CheckObject<ANFramework.Managers>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)ToLua.CheckObject<ANFramework.Managers>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Resource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)o;
			ANFramework.ResourceManager ret = obj.Resource;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Resource on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Lua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)o;
			ANFramework.LuaManager ret = obj.Lua;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Lua on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Coroutine(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ANFramework.Managers obj = (ANFramework.Managers)o;
			ANFramework.CoroutineManager ret = obj.Coroutine;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Coroutine on a nil value");
		}
	}
}

